====================
===== LESSON 1 =====
====================

Чистая архитектура помогает тестировать код с помощью Unit тестов.

Структура курса
- принципы чистой архитектуры. как помогает тестировть код Unit тестами
- внедрение зависимостей
- архитекутра программных систем вообще и андроид приложений в частности
- что такое хорошая архитектура
- что такое и чем отличаются MVP, MVVM, MVI
- как решают проблемы сохранения состояний и навигации в приложении классические библиотеки Moxy и Cicerone

Научусь ориентироваться в многообразии архитектурных подходов в разработке под Андроид


====================
===== LESSON 2 =====
====================

План урока:
-- зачем нужна архитектура
-- что такое архитектура
-- требования к архитектуре

у людей ограничены возможности, им нужно отдыхать, человек не может запоминать большое количество информации, складывать большие числа в уме. Поэтому человечество изобрело компьютеры.
Чтобы возможности человека расширялись нужны приложения 
Для того, чтобы появились приложения необходимо писать программный код
Программный код может понимать и человек, и компьютер, но писать может только человек. Читает и понимает код человек гораздо медленнее компьютера. Читать его приходится гораздо чаще чем писать. Гораздо чаще достается старый проект в который необходимо внедрять новые фичи. В итоге маленькие приложения обрастают большим количество экранов и новых функций. Внедрять их становится все сложнее и сложнее. Потому что человеку сложно разобраться с тысячью строк в Main Activity

Ошибочно считать, что мобильные приложения простые. Мобильный разработчик должен уметь предусмотреть различные сценарии использования приложения, ограниченность в ресурсах, слабые мощности мобильных устройств, ограниченность батареи, не постоянное сетевое соединение и различные другие проблемы. Все это усложняется операционной системой Android. Например, проблема жизненного цикла и сохранения состояния, а также большем количестве устройств, работающих под этой системой. Все это означает, что объем кодовой базы мобильных приложений растет. Т.к. человеку сложно воспринимать большие объемы информации, то лучше если этот код разделен, изолирован и четко структуророван. Еще лучше использовать проверенные решения знакомые многим разработчикам. Это упрощает общение, включение новых людей в команду. 

Во всем этом поможет Архитектура. В любом коде есть свои проблемы, но хорошая архитектура поможет писать более качественный код, который будет меньше беспокоить людей, которые будут его читать. 

Термин пришел из строительства зданий

Архитектура здания абстрактно определяет его внешний вид, функцию, но не задает конкретных технических решений. т.к. этим будут заниматься другие люди.

Без проекта можно построить что-то простое, например, туалет.
Но если строить небоскреб, то очевидно что здесь необходимо долгое вдумчивое проектирование и подробный проект.

Архитектура -- совокупность решений, которые необходимо продумать зарание и которые тяжело изменить в дальнейшем.

Роберт Мартин (Дядя Боб) -- разработчик Agile, Clean code, SOLID. 

Android framework вынуждает нас наследоваться от классов Activities, Fragments, Services, Adapters и других. У разработчика часто возникает собланз оставить весь код в этих классах. Так появляются God object Activities, которые умеют отображать пользовательский интерфейс и ходить в сеть и делать запросы в базу данных.

В 2012 статья Мартина  The Clean Architecture. В ней содержатся основные принципы чистой архитектуры. Есть также видео с доклада, которое позволяет осветить некоторые моменты. Некоторые сущности несовсем подходят для Андроид разработки, но общие принципы подошли отлично.

Требования к Архитектуре
1. Независимость от фреймворков      - проект не должен быть тесно интегрировать в фреймворк на котором он написан. Например, вы можете переключиться с одного веб фреймворка на другой. Перенести основную логику приложения с Андроид на IOS
2. Тестируемость                     - код можно легко тестировать автоматическими средствами. Достигается высокой изолированность и слабой связанностью
3. Независимость от UI               - можно легко перейти от веб интерфейса на консольный и при изменении дизайна нет необходимость переписывать пол проекта
4. Независимость от базы данных      - в хорошой архитектуре есть возможность заменить одну СУБД на другую достаточно лекго.
5. Независимость от внешних факторов - основная логика ничего не знает о внешнем мире, никаких протоколах и технологиях, которые исользуются. Все это можно легко изменить.


Для простых проектов использоваться сложные архитектурные приемы необязательно.